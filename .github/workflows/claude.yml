name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
          
      - name: Cache Claude development state
        uses: actions/cache@v3
        with:
          path: |
            .claude/
            project-state/
          key: claude-development-${{ github.event.issue.number }}-${{ github.sha }}
          restore-keys: |
            claude-development-${{ github.event.issue.number }}-

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow git operations for branch management
          allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,BatchTool,Edit,MultiEdit"
          
          # Direct prompt for continuous development
          direct_prompt: |
            CRITICAL: Continue working on the EXISTING branch for this issue.
            DO NOT create a new branch under any circumstances.
            
            MANDATORY STEPS:
            1. Run: git branch --show-current
            2. Run: git branch -a | grep "issue-$ISSUE_NUMBER"
            3. If not on correct branch, checkout the existing one
            4. Run: git log --oneline -10
            5. Read all files from previous phases before proceeding
            6. Build upon existing implementation - DO NOT start from scratch
            
            If no existing branch found, report this and wait for instructions.
          
          # Custom instructions for phased development
          custom_instructions: |
            ## 🚨 重要：ブランチ管理ルール
            
            **絶対的なルール：各Issue/PRに対して単一のブランチのみを使用すること**
            
            1. **ブランチ名の規則**:
               - 新規作成時のみ: `claude/issue-{issue_number}-{timestamp}`
               - 既存ブランチがある場合: そのブランチを必ず使用
            
            2. **ブランチ確認手順**（毎回実行）:
               ```bash
               # 現在のIssueに関連するブランチを検索
               git branch -a | grep "issue-{issue_number}"
               # 既存ブランチがあれば、それを使用
               git checkout existing-branch-name
               # なければ新規作成
               git checkout -b claude/issue-{issue_number}-{timestamp}
               ```
            
            3. **フェーズ型開発プロセス**:
               - Phase 1 (20%): 設計書を作成し、ユーザーレビューを待つ
               - Phase 2 (50%): **同一ブランチで**MVPを実装
               - Phase 3 (80%): **同一ブランチで**完全実装
               - Phase 4 (100%): **同一ブランチで**完成してPRを作成
            
            4. **各フェーズでの作業**:
               - 前のフェーズのコードを必ず読み込む
               - 既存の実装の上に追加実装を行う
               - 既存ファイルを削除・置換せず、改善・拡張する
               - git logで前のコミットを確認する
            
            5. **レビューポイント**:
               - 各フェーズ完了時に`@claude-review-needed`タグを追加
               - 必ず現在のブランチ名を報告に含める
               - 例: "Phase 2完了 (branch: claude/issue-24-20250712_012315)"
            
            6. **禁止事項**:
               - 新しいフェーズで新しいブランチを作成すること
               - 前のフェーズの実装を無視すること
               - ゼロから再実装すること
            
            7. **エラー時の対処**:
               - ブランチが見つからない場合は、ユーザーに確認を求める
               - 勝手に新しいブランチを作成しない
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

