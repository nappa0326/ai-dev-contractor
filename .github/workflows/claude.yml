name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from read to write for git push
      pull-requests: write  # Changed to allow PR creation
      issues: write  # Changed to allow issue updates
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
          # Always fetch all branches to find existing ones
          fetch-tags: true
          # Use the default GITHUB_TOKEN for write access
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Cache Claude development state
        uses: actions/cache@v3
        with:
          path: |
            .claude/
            project-state/
          key: claude-development-${{ github.event.issue.number }}-${{ github.sha }}
          restore-keys: |
            claude-development-${{ github.event.issue.number }}-

      - name: Configure git
        run: |
          git config --global user.name "claude[bot]"
          git config --global user.email "claude[bot]@users.noreply.github.com"
          
      - name: Setup branch tracking
        run: |
          # Fetch all remote branches
          git fetch --all --prune
          
          # Check for existing branch related to this issue
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # Check for project branch pattern
          PROJECT_BRANCH=$(git branch -a | grep -E "remotes/origin/project/.*[-/]claude[-/]issue-${ISSUE_NUMBER}" | head -1 | sed 's/remotes\/origin\///' | xargs)
          
          if [ -n "$PROJECT_BRANCH" ]; then
            echo "Found project branch: $PROJECT_BRANCH"
            git checkout -b "$PROJECT_BRANCH" "origin/$PROJECT_BRANCH" || git checkout "$PROJECT_BRANCH"
            echo "CLAUDE_EXISTING_BRANCH=$PROJECT_BRANCH" >> $GITHUB_ENV
            echo "CLAUDE_BASE_BRANCH=$PROJECT_BRANCH" >> $GITHUB_ENV
          else
            echo "No existing branch found for issue $ISSUE_NUMBER"
            echo "CLAUDE_EXISTING_BRANCH=" >> $GITHUB_ENV
            echo "CLAUDE_BASE_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
          fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Specify base branch for continuity (commented out - may not be implemented yet)
          # base_branch: ${{ env.CLAUDE_BASE_BRANCH }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow git operations for branch management and quality checks
          allowed_tools: >-
            Bash
            View
            GlobTool
            GrepTool
            BatchTool
            Edit
            MultiEdit
            Read
            Write
          
          # Direct prompt for continuous development
          direct_prompt: |
            CRITICAL RULES - MUST FOLLOW REGARDLESS OF PROJECT COMPLEXITY:
            
            1. PHASED DEVELOPMENT IS MANDATORY
               - NEW PROJECTS: ALWAYS implement in 4 separate phases
               - CONTINUATION TASKS: Follow task-specific phase count (1-4 phases)
               - NEVER complete multiple phases in one execution
               - Each phase MUST end with @claude-review-needed tag
               - Wait for user approval before proceeding to next phase
            
            2. Branch management for Issue #${{ github.event.issue.number }}
            
            Current situation:
            ${{ env.CLAUDE_EXISTING_BRANCH && format('- Existing branch found: {0}', env.CLAUDE_EXISTING_BRANCH) || '- No existing branch found (this appears to be Phase 1)' }}
            
            MANDATORY WORKFLOW:
            1. First, check current branch: git branch --show-current
            2. Search for existing branches: git branch -a | grep -E "project/.*/claude/issue-${{ github.event.issue.number }}"
            
            3. Decision logic for NEW PROJECTS (Phase 1):
               - Check if issue contains continuation tags:
                 [project: xxx], [extends: #XX], [bugfix: #XX], [enhance: #XX], 
                 [refactor: #XX], [fix: #XX], [update: #XX], [security: #XX], 
                 [docs: #XX], [test: #XX], [perf: #XX]
               - If any tags exist → This is continuation work, skip to step 4
               - Extract project name from issue title (kebab-case conversion)
                 Example: "シンプルな名刺画像生成CLIツール" → "meishi-generator"
                 Rule: Remove "- AI自動開発案件" suffix and convert to English kebab-case
               - Create project main branch: git checkout -b project/{project-name}
               - Create project directory and .project.yml
               - Push project branch: git push -u origin project/{project-name}
               - Create working branch: git checkout -b project/{project-name}/claude/issue-${{ github.event.issue.number }}-initial
            
            4. Decision logic for CONTINUING WORK:
               - For Phase 2+ of same issue → Use existing branch (NEVER create new)
                 - git checkout {existing-branch}
                 - git pull origin {existing-branch}
               - For continuation development tasks:
                 - Extract task type from tags: fix, bugfix, enhance, refactor, update, security, docs, test, perf
                 - Extract project name:
                   * From [project: xxx] tag if present
                   * Otherwise, from referenced issue ([bugfix: #XX] → look up issue #XX's project):
                     1. Use GitHub API to get issue #XX details
                     2. Check issue #XX's labels or body for project name
                     3. Search for project branch: git branch -a | grep -E "project/.*/claude/issue-XX"
                     4. Extract project name from found branch
                 - git checkout project/{project-name}
                 - git pull origin project/{project-name}
                 - git checkout -b project/{project-name}/claude/issue-${{ github.event.issue.number }}-{task-type}
                 - Examples:
                   * [bugfix: #44] → branch: project/{name}/claude/issue-XX-bugfix
                   * [enhance: #44] → branch: project/{name}/claude/issue-XX-enhance
                   * [refactor: #44] → branch: project/{name}/claude/issue-XX-refactor
            
            5. For Phase 1 ONLY - MANDATORY PROJECT DIRECTORY:
               - Create project-specific directory with kebab-case naming
               - Examples: "PDF圧縮アプリ" → pdf-compressor/, "OCRサービス" → ocr-service/
               - MUST create directory and initial README.md in Phase 1
               - Create ONLY design documents in Phase 1
               - DO NOT implement any code in Phase 1
            
            6. For continuing work (Phase 2+):
               - Run: git log --oneline -10
               - Read ALL files from previous phases
               - Build upon existing implementation
            
            7. Always report your branch name in responses
            
            8. Quality checks before commit (if applicable):
               - Run linting: npm run lint, yarn lint, ruff check, etc.
               - Run tests: npm test, pytest, etc.
               - Fix any issues before proceeding
            
            9. CRITICAL - Commit and push at the end of EVERY phase:
               - Follow the git operations in CLAUDE.md "各フェーズ完了時の必須作業" section
               - NEVER complete a phase without pushing to remote
               - After push, add comment with @claude-review-needed
               - STOP execution and wait for user response
          
          # Custom instructions for phased development
          custom_instructions: |
            ## 🌏 日本語コミュニケーション必須
            
            **絶対的ルール**: GitHubへのすべてのコメントは日本語で記述すること
            - フェーズ報告、エラーメッセージ、説明文すべて日本語使用
            - 技術用語（Phase、Branch、Issue等）は英語のまま使用可
            - コード内のコメントは英語でも可
            - 例: "Phase 1完了" ✅、"Phase 1 completed" ❌
            - ブランチ報告は必ず「**ブランチ**: `branch-name`」形式で記載
            
            ## 🚨 重要：プロジェクトブランチ戦略
            
            **絶対的なルール：すべての新規開発でプロジェクトブランチを使用**
            
            1. **ブランチ構造**:
               - システム設定: `master`（CLAUDE.md、workflowsのみ）
               - プロジェクトメイン: `project/{project-name}`
               - 作業ブランチ（初期）: `project/{project-name}/claude/issue-{number}-initial`
               - 作業ブランチ（継続）: `project/{project-name}/claude/issue-{number}-{feature}`
            
            2. **ブランチ確認手順**:
               CLAUDE.mdのブランチ管理手順セクションを参照してください。
            
            3. **フェーズ型開発プロセス**:
               
               **新規プロジェクト（4フェーズ）**:
               - Phase 1 (20%): 設計書を作成し、ユーザーレビューを待つ
               - Phase 2 (50%): **同一ブランチで**MVPを実装
               - Phase 3 (80%): **同一ブランチで**完全実装
               - Phase 4 (100%): **同一ブランチで**品質向上・ドキュメント整備
               
               **継続開発タスク（タスクタイプ別フェーズ構成）**:
               - fix（軽微な修正）: 1フェーズ（100%で完了）
               - bugfix（バグ修正）: 2フェーズ（40% → 100%）
               - enhance（機能追加）: 3フェーズ（30% → 70% → 100%）
               - refactor（リファクタリング）: 3-4フェーズ（25% → 50% → 75% → 100%）
               - update（依存関係更新）: 2-3フェーズ
               - security（セキュリティ対応）: 2-3フェーズ
               - docs（ドキュメント整備）: 1-2フェーズ
               - test（テスト追加）: 2フェーズ
               - perf（パフォーマンス改善）: 3フェーズ
            
            ## 📌 プロジェクト完了とPR作成
            
            **すべてのフェーズ（1-4）が完了し、以下の条件を満たしたら**：
            - すべての実装が完了
            - テストがパス
            - ドキュメントが整備済み
            - コードレビュー準備完了
            
            **プロジェクト完了時、プロジェクトブランチへPRを作成**：
            ```bash
            # プロジェクトブランチへPRを作成
            gh pr create --base project/{project-name} \
                         --title "feat: Issue #${{ github.event.issue.number }} - [機能説明]" \
                         --body "## 実装内容\n[実装内容の要約]\n\nCloses #${{ github.event.issue.number }}"
            ```
            
            注意：
            - PRタイトルの[機能説明]は実装した機能の簡潔な説明に置き換える
            - PR本文の[実装内容の要約]は実装した機能の概要を記載
            - PR作成後、自動的にワークフローが完了を検出
            
            ## 🚨 各フェーズ完了時の必須作業
            **CLAUDE.mdの「各フェーズ完了時の必須作業」セクションを参照してください。**
            
            **重要**: プッシュを忘れると、次回の実行時に既存ブランチが見つからず、
            新しいブランチが作成されてしまい、フェーズ間の連続性が失われます。
            
            4. **各フェーズでの作業**:
               - 前のフェーズのコードを必ず読み込む
               - 既存の実装の上に追加実装を行う
               - 既存ファイルを削除・置換せず、改善・拡張する
               - git logで前のコミットを確認する
            
            5. **レビューポイント**:
               - 各フェーズ完了時に`@claude-review-needed`タグを追加
               - 必ず現在のブランチ名を報告に含める
               - 例: "Phase 2完了 (branch: project/pdf-compressor/claude/issue-24-initial) @claude-review-needed"
            
            6. **プロジェクト完了判定**:
               - すべてのフェーズが完了してもプロジェクトは自動完了しない
               - 品質基準を満たし、デプロイ可能な状態になったら完了
               - 完了時はgh pr createコマンドでPRを作成
            
            7. **禁止事項**:
               - 新しいフェーズで新しいブランチを作成すること
               - 前のフェーズの実装を無視すること
               - ゼロから再実装すること
            
            8. **エラー時の対処**:
               - ブランチが見つからない場合は、ユーザーに確認を求める
               - 勝手に新しいブランチを作成しない
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

