name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from read to write for git push
      pull-requests: write  # Changed to allow PR creation
      issues: write  # Changed to allow issue updates
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
          # Always fetch all branches to find existing ones
          fetch-tags: true
          # Use the default GITHUB_TOKEN for write access
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Cache Claude development state
        uses: actions/cache@v3
        with:
          path: |
            .claude/
            project-state/
          key: claude-development-${{ github.event.issue.number }}-${{ github.sha }}
          restore-keys: |
            claude-development-${{ github.event.issue.number }}-

      - name: Configure git
        run: |
          git config --global user.name "claude[bot]"
          git config --global user.email "claude[bot]@users.noreply.github.com"
          
      - name: Setup branch tracking
        run: |
          # Fetch all remote branches
          git fetch --all --prune
          
          # Check for existing branch related to this issue
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          EXISTING_BRANCH=$(git branch -a | grep -E "remotes/origin/.*issue-${ISSUE_NUMBER}" | head -1 | sed 's/remotes\/origin\///' | xargs)
          
          if [ -n "$EXISTING_BRANCH" ]; then
            echo "Found existing branch: $EXISTING_BRANCH"
            git checkout -b "$EXISTING_BRANCH" "origin/$EXISTING_BRANCH" || git checkout "$EXISTING_BRANCH"
            echo "CLAUDE_EXISTING_BRANCH=$EXISTING_BRANCH" >> $GITHUB_ENV
            echo "CLAUDE_BASE_BRANCH=$EXISTING_BRANCH" >> $GITHUB_ENV
          else
            echo "No existing branch found for issue $ISSUE_NUMBER"
            echo "CLAUDE_EXISTING_BRANCH=" >> $GITHUB_ENV
            echo "CLAUDE_BASE_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
          fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Specify base branch for continuity (commented out - may not be implemented yet)
          # base_branch: ${{ env.CLAUDE_BASE_BRANCH }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow git operations for branch management and quality checks
          allowed_tools: >-
            Bash
            View
            GlobTool
            GrepTool
            BatchTool
            Edit
            MultiEdit
            Read
            Write
          
          # Direct prompt for continuous development
          direct_prompt: |
            CRITICAL RULES - MUST FOLLOW REGARDLESS OF PROJECT COMPLEXITY:
            
            1. PHASED DEVELOPMENT IS MANDATORY
               - ALWAYS implement in 4 separate phases
               - NEVER complete multiple phases in one execution
               - Each phase MUST end with @claude-review-needed tag
               - Wait for user approval before proceeding to next phase
            
            2. Branch management for Issue #${{ github.event.issue.number }}
            
            Current situation:
            ${{ env.CLAUDE_EXISTING_BRANCH && format('- Existing branch found: {0}', env.CLAUDE_EXISTING_BRANCH) || '- No existing branch found (this appears to be Phase 1)' }}
            
            MANDATORY WORKFLOW:
            1. First, check current branch: git branch --show-current
            2. Search for existing branches: git branch -a | grep "issue-${{ github.event.issue.number }}"
            
            3. Decision logic:
               - If existing branch found → Use it (NEVER create a new one)
                 - git checkout {existing-branch}
                 - git pull origin {existing-branch}
               - If no existing branch → This is Phase 1, create: git checkout -b claude/issue-${{ github.event.issue.number }}-$(date +%Y%m%d_%H%M%S)
            
            4. For Phase 1 ONLY - MANDATORY PROJECT DIRECTORY:
               - Create project-specific directory with kebab-case naming
               - Examples: "PDF圧縮アプリ" → pdf-compressor/, "OCRサービス" → ocr-service/
               - MUST create directory and initial README.md in Phase 1
               - Create ONLY design documents in Phase 1
               - DO NOT implement any code in Phase 1
            
            5. For continuing work (Phase 2+):
               - Run: git log --oneline -10
               - Read ALL files from previous phases
               - Build upon existing implementation
            
            6. Always report your branch name in responses
            
            7. Quality checks before commit (if applicable):
               - Run linting: npm run lint, yarn lint, ruff check, etc.
               - Run tests: npm test, pytest, etc.
               - Fix any issues before proceeding
            
            8. CRITICAL - Commit and push at the end of EVERY phase:
               - git add -A
               - git commit -m "feat: Phase X implementation for Issue #${{ github.event.issue.number }}"
               - git push origin {your-branch-name}
               - NEVER complete a phase without pushing to remote
               - After push, add comment with @claude-review-needed
               - STOP execution and wait for user response
          
          # Custom instructions for phased development
          custom_instructions: |
            ## 🚨 重要：ブランチ管理ルール
            
            **絶対的なルール：各Issue/PRに対して単一のブランチのみを使用すること**
            
            1. **ブランチ名の規則**:
               - 新規作成時のみ: `claude/issue-{issue_number}-{timestamp}`
               - 既存ブランチがある場合: そのブランチを必ず使用
            
            2. **ブランチ確認手順**（毎回実行）:
               ```bash
               # 現在のIssueに関連するブランチを検索
               git branch -a | grep "issue-{issue_number}"
               
               # 既存ブランチがある場合 → 必ずそれを使用
               git checkout {existing-branch-name}
               git pull origin {existing-branch-name}
               
               # 既存ブランチがない場合 → Phase 1なので新規作成
               git checkout -b claude/issue-{issue_number}-{timestamp}
               ```
            
            3. **フェーズ型開発プロセス**:
               - Phase 1 (20%): 設計書を作成し、ユーザーレビューを待つ
               - Phase 2 (50%): **同一ブランチで**MVPを実装
               - Phase 3 (80%): **同一ブランチで**完全実装
               - Phase 4 (100%): **同一ブランチで**完成してPRを作成
                 - 必須: コメントに【PHASE4_COMPLETE】マーカーを含める
            
            ## 📌 Phase 4完了時の必須マーカー
            **重要**: Phase 4の全作業が完了し、最終コミット・プッシュが成功した後、
            必ず**別の新規コメント**として以下のマーカーのみを投稿すること：
            
            ```
            【PHASE4_COMPLETE】
            ```
            
            注意: 
            - Phase 4の作業報告とは別に、独立したコメントとして投稿
            - このマーカーコメントが完了通知のトリガーとなる
            - Phase 4の作業中や報告内にはこのマーカーを含めないこと
            
            ## 🚨 各フェーズ完了時の必須作業
            **絶対的ルール：各フェーズの作業を完了する前に必ず以下を実行**
            
            ```bash
            # 1. すべての変更をステージング
            git add -A
            
            # 2. フェーズ完了をコミット
            git commit -m "feat: Phase X implementation for Issue #${{ github.event.issue.number }}"
            
            # 3. リモートにプッシュ（これを忘れると次回新しいブランチが作成される！）
            git push origin {現在のブランチ名}
            ```
            
            **警告**: プッシュを忘れると、次回の実行時に既存ブランチが見つからず、
            新しいブランチが作成されてしまい、フェーズ間の連続性が失われます。
            
            4. **各フェーズでの作業**:
               - 前のフェーズのコードを必ず読み込む
               - 既存の実装の上に追加実装を行う
               - 既存ファイルを削除・置換せず、改善・拡張する
               - git logで前のコミットを確認する
            
            5. **レビューポイント**:
               - 各フェーズ完了時に`@claude-review-needed`タグを追加
               - 必ず現在のブランチ名を報告に含める
               - 例: "Phase 2完了 (branch: claude/issue-24-20250712_012315) @claude-review-needed"
            
            6. **禁止事項**:
               - 新しいフェーズで新しいブランチを作成すること
               - 前のフェーズの実装を無視すること
               - ゼロから再実装すること
            
            7. **エラー時の対処**:
               - ブランチが見つからない場合は、ユーザーに確認を求める
               - 勝手に新しいブランチを作成しない
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

