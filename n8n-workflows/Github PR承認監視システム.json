{
  "name": "Github PR承認監視システム",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "github-pr-merged",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "fbd93a41-a239-44fd-9a48-4f3e46072351",
      "name": "Webhook",
      "webhookId": "d3de2c2f-24c8-4c01-b44c-6ca3d9caafb6"
    },
    {
      "parameters": {
        "jsCode": "          // GitHub WebhookからPRマージイベントを解析\n          const event = $json.body;\n\n          // PRがクローズされた、かつマージされた場合のみ処理\n          if (event.action !== 'closed' || !event.pull_request?.merged) {\n            return {\n              json: {\n                skip: true,\n                reason: 'PR not merged'\n              }\n            };\n          }\n\n          // PR情報を取得\n          const pr = event.pull_request;\n          const prNumber = pr.number;\n          const prTitle = pr.title;\n          const baseBranch = pr.base.ref;\n          const headBranch = pr.head.ref;\n\n          // フェーズ別ブランチのパターンマッチ\n          // 新統一形式: project/{project-name}-{issue-number}-phase{N}\n          // 例: project/csv-analyzer-95-phase1\n          let phaseMatch = headBranch.match(/^project\\/(.+)-(\\d+)-phase(\\d+)$/);\n          let projectName, issueNumber, currentPhase;\n\n          if (phaseMatch) {\n            projectName = phaseMatch[1];\n            issueNumber = phaseMatch[2];\n            currentPhase = parseInt(phaseMatch[3]);\n          } else {\n            // 旧形式のサポート（後方互換性）\n            // 形式1: {project-name}-{issue-number}-phase{N}\n            phaseMatch = headBranch.match(/^(.+)-(\\d+)-phase(\\d+)$/);\n            if (phaseMatch) {\n              projectName = phaseMatch[1];\n              issueNumber = phaseMatch[2];\n              currentPhase = parseInt(phaseMatch[3]);\n            } else {\n              return {\n                json: {\n                  skip: true,\n                  reason: 'Not a phase branch'\n                }\n              };\n            }\n          }\n\n          if (!issueNumber) {\n            return {\n              json: {\n                skip: true,\n                reason: 'Could not determine issue number'\n              }\n            };\n          }\n\n          const nextPhase = currentPhase + 1;\n\n          // Final Status判定の代わりに、Issueコメントで判断するため\n          // ここでは固定の4フェーズチェックを削除\n          // （可変フェーズ数に対応）\n\n          return {\n            json: {\n              skip: false,\n              issue_number: issueNumber,\n              project_name: projectName,\n              current_phase: currentPhase,\n              next_phase: nextPhase,\n              pr_number: prNumber,\n              pr_title: prTitle,\n              base_branch: baseBranch,\n              head_branch: headBranch\n            }\n          };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "72e41c27-a74c-40e2-8f98-30a1faa173e3",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "920068f0-8f06-444a-a7dd-d442dea4a6c5",
              "leftValue": "={{ $json.skip }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        440,
        0
      ],
      "id": "41ce358b-6fe1-4132-a86b-69ab472c82a6",
      "name": "Filter"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "= https://api.github.com/repos/nappa0326/ai-development-company/issues/{{ $json.issue_number }}/comments",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.github.v3+json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"body\": \"@claude Phase {{ $json.next_phase }}を開始してください\\n\\n前フェーズのPR #{{ $json.pr_number }} がマージされました。\\n\\n**重要**: \\n- ベースブランチ: `project/{{ $json.project_name }}`\\n- 新しい作業ブランチ: `project/{{ $json.project_name }}-{{ $json.issue_number }}-phase{{ $json.next_phase }}`\\n- 必ずベースブランチから作成してください\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        660,
        0
      ],
      "id": "1c6a1003-aea1-4464-abc3-c23bd6ac87fe",
      "name": "HTTP Request",
      "credentials": {
        "githubApi": {
          "id": "pY9qy7slGFPBmR5S",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C094LNGF8H5",
          "mode": "id"
        },
        "text": "=🔄 Phase {{ $('Code').item.next_phase }}を自動開始しました\n  プロジェクト: {{ $('Code').item.project_name }}\n  Issue: #{{ $('Code').item.issue_number }}\n  前フェーズPR: #{{ $('Code').item.pr_number }} がマージされました",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        880,
        0
      ],
      "id": "4853d38b-4a84-4228-9194-c883e089c3e7",
      "name": "Send a message",
      "webhookId": "b506696e-9a7a-4b27-8db7-a50034f74213",
      "credentials": {
        "slackApi": {
          "id": "aHC6dGXUUgCWfDpJ",
          "name": "Slack account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5e2da183-ab6d-459a-a09e-aa00e6d2db05",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b9ad821e1bac462e0829b0fcfa0ee54572f5b3a4dad3925c8cb3c5dae1bcef22"
  },
  "id": "yP4ZcyuA2wHoqq5L",
  "tags": []
}