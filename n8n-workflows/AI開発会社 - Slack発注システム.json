{
  "name": "AI開発会社 - Slack発注システム",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "slack-order",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "015ed08f-0f1a-492d-8b9e-beecf18dcf6d",
      "name": "Webhook",
      "webhookId": "b3989678-2800-455f-a5fd-313fe42c19a7"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "  // Slack スラッシュコマンドのデータを解析\n  const slackData = $json.body;\n  const text = slackData.text || '';\n\n  // より堅牢なクォート付き引数パーサー\n  function parseQuotedArgs(text) {\n    const args = [];\n    let current = '';\n    let inQuotes = false;\n    let quoteChar = null; // \" または ' をサポート\n\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const prevChar = i > 0 ? text[i-1] : null;\n\n      // クォート開始/終了の判定\n      if ((char === '\"' || char === \"'\") && prevChar !== '\\\\') {\n        if (!inQuotes) {\n          inQuotes = true;\n          quoteChar = char;\n        } else if (char === quoteChar) {\n          inQuotes = false;\n          quoteChar = null;\n        } else {\n          current += char;\n        }\n      }\n      // スペースでの区切り（クォート外のみ）\n      else if (char === ' ' && !inQuotes) {\n        if (current.trim()) {\n          args.push(current.trim());\n          current = '';\n        }\n        // 連続スペースをスキップ\n        while (i + 1 < text.length && text[i + 1] === ' ') {\n          i++;\n        }\n      }\n      // 通常文字\n      else {\n        current += char;\n      }\n    }\n\n    // 最後の引数を追加\n    if (current.trim()) {\n      args.push(current.trim());\n    }\n\n    return args;\n  }\n\n  // テキストを解析\n  const args = parseQuotedArgs(text);\n  const subCommand = args[0] || '';\n  const taskTypes = ['new', 'fix', 'bugfix', 'enhance', 'refactor', 'update', 'security', 'docs', 'test',\n  'perf'];\n\n  if (!taskTypes.includes(subCommand)) {\n    return {\n      json: {\n        error: true,\n        message: `無効なサブコマンド: ${subCommand}\\n使用可能: ${taskTypes.join(', ')}`,\n        slack_channel: slackData.channel_id,\n        slack_user: slackData.user_name,\n        response_url: slackData.response_url\n      }\n    };\n  }\n\n  // 新規プロジェクトの場合\n  if (subCommand === 'new') {\n    const projectName = args[1] || 'Slack発注プロジェクト';\n    const requirements = args[2] || 'Slack経由での発注';\n    const budget = args[3] || '応相談';\n    const deadline = args[4] || '2週間';\n\n    return {\n      json: {\n        command_type: 'new',\n        project_name: projectName,\n        requirements: requirements,\n        budget: budget,\n        deadline: deadline,\n        priority: \"中\",\n        contact_info: `Slack User: ${slackData.user_name}`,\n        technical_preferences: \"なし\",\n        slack_channel: slackData.channel_id,\n        slack_user: slackData.user_name,\n        response_url: slackData.response_url,\n        debug: {\n          raw_text: text,\n          parsed_args: args,\n          args_count: args.length\n        }\n      }\n    };\n  }\n\n  // 継続開発の場合\n  const originalIssueMatch = args[1] ? args[1].match(/#(\\d+)/) : null;\n  if (!originalIssueMatch) {\n    return {\n      json: {\n        error: true,\n        message: '元のIssue番号を指定してください（例: #44）',\n        slack_channel: slackData.channel_id,\n        slack_user: slackData.user_name,\n        response_url: slackData.response_url\n      }\n    };\n  }\n\n  const originalIssueNumber = originalIssueMatch[1];\n  const description = args.slice(2).join(' ') || `${subCommand} 作業`;\n\n  return {\n    json: {\n      command_type: 'extend',\n      task_type: subCommand,\n      original_issue_number: originalIssueNumber,\n      description: description,\n      priority: \"中\",\n      contact_info: `Slack User: ${slackData.user_name}`,\n      slack_channel: slackData.channel_id,\n      slack_user: slackData.user_name,\n      response_url: slackData.response_url,\n      debug: {\n        raw_text: text,\n        parsed_args: args,\n        args_count: args.length\n      }\n    }\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "94e25cda-bda2-40e9-91fd-e995c9a56f5a",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://n8n.oppy-ai.com/webhook/ai-company-order",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        0
      ],
      "id": "29138c88-ecf9-4710-9192-be4b7229f97b",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response_type\": \"in_channel\",\n  \"text\": \"🚀 プロジェクトを受注しました！\",\n  \"attachments\": [\n    {\n      \"color\": \"good\",\n      \"fields\": [\n        {\n          \"title\": \"プロジェクト名\",\n          \"value\": \"{{ $('Code').item.json.project_name }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"予算\",\n          \"value\": \"{{ $('Code').item.json.budget }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"期限\",\n          \"value\": \"{{ $('Code').item.json.deadline }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"進捗確認\",\n          \"value\": \"GitHub で進捗を確認できます\",\n          \"short\": false\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        460,
        0
      ],
      "id": "e72c157a-7928-4b5e-9759-7c311a700e29",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "V00wqOQfw5vs8CVQ"
  },
  "versionId": "ef77121f-da72-4ac9-a35a-f629989b15e0",
  "meta": {
    "instanceId": "b9ad821e1bac462e0829b0fcfa0ee54572f5b3a4dad3925c8cb3c5dae1bcef22"
  },
  "id": "g5Q9ix9cAyxNrhDw",
  "tags": []
}