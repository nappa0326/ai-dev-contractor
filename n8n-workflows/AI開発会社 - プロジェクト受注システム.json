{
  "name": "AI開発会社 - プロジェクト受注システム",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-company-order",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "ec934913-ff52-4cbf-9dd9-9021f8934a3c",
      "name": "Webhook",
      "webhookId": "dcd3be69-6266-41d5-b8df-21cf0e629cc1"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "=={{ $env.SLACK_CHANNEL_ID }}",
          "mode": "id"
        },
        "text": "={{ $('Webhook').item.json.body.command_type === 'extend' ? '🔧 継続開発タスク受注！\\n\\n**タスクタイプ**: ' + $('Webhook').item.json.body.task_type + '\\n**元のIssue**: #' + $('Webhook').item.json.body.original_issue_number + '\\n**作業内容**: ' + $('Webhook').item.json.body.description + '\\n**GitHub Issue**: ' + $('HTTP Request - Create an issue').item.json.html_url + '\\n\\nClaude Code による開発を開始します。' : '🚀  新規プロジェクト受注！\\n\\n**プロジェクト名**: ' + $('Webhook').item.json.body.project_name + '\\n**予算**: ' + $('Webhook').item.json.body.budget + '\\n**期限**: ' + $('Webhook').item.json.body.deadline + '\\n**GitHub Issue**: ' + $('HTTP Request - Create an issue').item.json.html_url + '\\n\\nClaude Code による自動開発を開始します。' }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        944,
        0
      ],
      "id": "1c071c7b-f85c-4aaf-ae43-618ba555155c",
      "name": "Send a message",
      "webhookId": "dfd7cac6-aa9f-41d3-b8cd-ac590944b823",
      "credentials": {
        "slackApi": {
          "id": "aHC6dGXUUgCWfDpJ",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"プロジェクトを受注いたしました\",\n  \"project_name\": \"{{ $('Webhook').item.json.body.project_name || $('Webhook').item.json.body.description }}\",\n  \"github_issue\": \"{{ $('HTTP Request - Create an issue').item.json.html_url }}\",\n  \"issue_number\": \"{{ $('HTTP Request - Create an issue').item.json.number }}\",\n  \"estimated_completion\": \"{{ $('AI Agent').item.json.output.match(/合計開発時間[:\\\\\\\\s]*([^\\\\\\\\n]+)/)?.[1] || '2-3時間' }}\",\n  \"next_steps\": [\n    \"GitHub Issueが作成されました\",\n    \"Claude Codeによる自動開発が開始されます\",\n    \"完了時に自動通知をお送りします\"\n  ],\n  \"contact\": \"進捗は GitHub Issue で確認できます\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1152,
        0
      ],
      "id": "13fc1abd-4530-4034-96f1-7b9a71c8bfb8",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.command_type === 'extend' ?  '以下の継続開発タスクを分析してください：\\n\\nタスクタイプ: ' + $json.body.task_type + '\\n元のIssue: #' + $json.body.original_issue_number + '\\n作業内容: ' + $json.body.description + '\\n優先度: ' + $json.body.priority + '\\n連絡先: ' + $json.body.contact_info : '以下のプロジェクト情報を分析してください：\\n\\nプロジェクト名: ' + $json.body.project_name + '\\n要件: ' + $json.body.requirements + '\\n予算: ' + $json.body.budget + '\\n期限: ' + $json.body.deadline + '\\n優先度: ' + $json.body.priority + '\\n連絡先: ' + $json.body.contact_info + '\\n技術的希望: ' + $json.body.technical_preferences }}",
        "options": {
          "systemMessage": "={{ $json.body.command_type === 'extend' ?  'あなたは経験豊富な技術リーダーです。\\\\n継続開発タスクの要件を分析し、以下の形式で実装計画を作成してください：\\\\n\\\\n## 実装計画\\\\n\\\\n### 1. タスク概要\\\\n- タスクタイプ: ' + $json.body.task_type + '\\\\n- 元のIssue: #' + $json.body.original_issue_number + '\\\\n- 作業内容の要約\\\\n\\\\n### 2. 影響範囲分析\\\\n- 変更が必要なファイル/コンポーネント\\\\n- 既存機能への影響\\\\n- テストすべき項目\\\\n\\\\n### 3. 実装方針\\\\n- 具体的な実装手順\\\\n- 使用する技術/パターン\\\\n- 注意すべきポイント\\\\n\\\\n### 4. Claude Code実装時間見積もり\\\\n- タスクタイプ別の標準時間:\\\\n  - fix（軽微な修正）: 15-30分\\\\n  - bugfix（バグ修正）: 30-90分（2フェーズ）\\\\n  - enhance（機能追加）: 90-150分（3フェーズ）\\\\n  - refactor（リファクタリング）: 2-3時間（3-4フェーズ）\\\\n- 実際の見積もり: X-Y分\\\\n- 複雑度による調整理由\\\\n\\\\n### 5. テスト計画\\\\n- 単体テストの内容\\\\n- 結合テストの内容\\\\n- 動作確認手順\\\\n\\\\n最後に、実装の要点を簡潔にまとめてください。' : 'あなたは経験豊富なプロジェクトマネージャーです。\\\\n受信したプロジェクト要件を分析し、以下の形式で技術仕様書を作成してください：\\\\n\\\\n## 技術仕様書\\\\n\\\\n### 1. プロジェクト概要\\\\n- プロジェクト名: ' + $json.project_name + '\\\\n- 概要: 要件から読み取れる主要機能を簡潔に説明\\\\n\\\\n### 2. 推奨技術スタック\\\\n- フロントエンド: 要件に最適な技術を選定\\\\n- バックエンド: 適切なサーバー技術\\\\n- データベース: データ要件に応じた選択\\\\n- その他: 必要な追加技術\\\\n\\\\n### 3. 機能要件詳細\\\\n- 主要機能の詳細リスト\\\\n- 各機能の実装優先度\\\\n\\\\n### 4. Claude Code開発時間見積もり\\\\n- 開発フェーズと所要時間:\\\\n  - Phase 1 (設計・アーキテクチャ): 20-30分\\\\n  - Phase 2 (MVP実装): 30-60分\\\\n  - Phase 3 (完全実装): 30-60分\\\\n  - Phase 4 (品質向上・ドキュメント): 20-30分\\\\n- 合計開発時間: 2-3時間（標準的なプロジェクト）\\\\n- 複雑度による調整:\\\\n  - シンプル（基本的なCLI/単機能）: 1.5-2時間\\\\n  - 標準（複数機能の統合）: 2-3時間\\\\n  - 複雑（外部API連携/DB使用）: 3-4時間\\\\n  - 非常に複雑（フルスタック）: 4-6時間\\\\n\\\\n### 5. リスク分析\\\\n- 技術的リスク\\\\n- スケジュールリスク\\\\n- 品質リスク\\\\n\\\\n### 6. 成功基準\\\\n- 完成品の品質基準\\\\n- テスト要件\\\\n\\\\n### 7. 納期見込み\\\\n- 開始から完了まで: 当日中（通常）\\\\n- PR作成・レビュー含む: 翌営業日まで\\\\n\\\\n最後に、GitHub Issue用のタイトルと説明文をMarkdown形式で生成してください。' }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        208,
        0
      ],
      "id": "8998a0ab-35cc-443a-b5c8-0c4e4118e277",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "maxOutputTokens": 4096,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        80,
        224
      ],
      "id": "1f1777ac-ccb9-4b2e-8bee-a9331e510399",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "Xqt0r9XkegjAeluD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.project_name + '_' + Date.now() }}",
        "contextWindowLength": 30
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        240,
        224
      ],
      "id": "75c71d0c-372b-4e6d-ad81-b158e78c0186",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "  // AI Agentの出力とWebhookデータを取得\n  const aiOutput = $('AI Agent').first().json.output;\n  const orderData = $('Webhook').first().json.body;\n\n  // コマンドタイプによる分岐\n  if (!orderData.command_type || orderData.command_type === 'new') {\n    // 新規プロジェクトの場合（既存の動作を維持）\n    const issueTitle = `${orderData.project_name} - AI自動開発案件`;\n    const issueBody = `## プロジェクト発注情報\n\n  **発注日時**: ${new Date().toISOString()}\n  **プロジェクト名**: ${orderData.project_name}\n  **要件**: ${orderData.requirements}\n  **予算**: ${orderData.budget}\n  **期限**: ${orderData.deadline}\n  **優先度**: ${orderData.priority}\n\n  ---\n\n  ## AI分析結果\n\n  ${aiOutput}\n\n  ---\n\n  ## 開発指示\n\n  @claude 上記の技術仕様書に基づいて、完全なプロジェクトを作成してください。\n\n  ### 成果物要件:\n  1. 完全なソースコード\n  2. README.md（セットアップ手順含む）\n  3. 基本的なテストコード\n  4. package.json/requirements.txt（依存関係）\n  5. 基本的なAPI仕様書（該当する場合）\n\n  ### 品質基準:\n  - コードは本番運用可能なレベル\n  - セキュリティベストプラクティスに従う\n  - レスポンシブデザイン対応（Webアプリの場合）\n  - 基本的なエラーハンドリング実装\n\n  ### 技術スタック推奨:\n  AI分析結果の推奨技術スタックを参考にしてください。\n\n  完了時にはプルリクエストを作成し、デプロイ可能な状態で納品してください。`;\n\n    return {\n      json: {\n        // GitHub API用の完全なリクエストボディ\n        request_body: {\n          title: issueTitle,\n          body: issueBody,\n          labels: ['ai-development', 'auto-order', '新規開発'],\n          assignees: ['nappa0326']\n        }\n      }\n    };\n\n  } else if (orderData.command_type === 'extend') {\n    // 継続開発の場合\n    // タスクタイプのマッピングをMapで定義（型安全）\n    const taskTypeLabelMap = new Map([\n      ['fix', '軽微な修正'],\n      ['bugfix', 'バグ修正'],\n      ['enhance', '機能追加'],\n      ['refactor', 'リファクタリング'],\n      ['update', '依存関係更新'],\n      ['security', 'セキュリティ'],\n      ['docs', 'ドキュメント'],\n      ['test', 'テスト'],\n      ['perf', 'パフォーマンス']\n    ]);\n\n    // task_typeを取得してラベルを決定\n    const taskType = orderData.task_type || '';\n    const taskLabel = taskTypeLabelMap.get(taskType) || taskType;\n\n    const issueTitle = `[${taskLabel}] Issue #${orderData.original_issue_number} - ${orderData.description}`;\n\n    // タスクタイプに応じた@claudeコマンドを生成（修正箇所）\n    const claudeCommand = `@claude [${taskType}: #${orderData.original_issue_number}]\n  ${orderData.description}`;\n\n    const issueBody = `## 作業内容\n  ${orderData.description}\n\n  ## 元のIssue\n  #${orderData.original_issue_number}\n\n  ## タスクタイプ\n  ${taskType} (${taskLabel})\n\n  ## 優先度\n  ${orderData.priority}\n\n  ## 連絡先\n  ${orderData.contact_info}\n\n  ---\n\n  ## AI分析結果\n\n  ${aiOutput}\n\n  ---\n\n  ${claudeCommand}`;\n\n    return {\n      json: {\n        // GitHub API用の完全なリクエストボディ\n        request_body: {\n          title: issueTitle,\n          body: issueBody,\n          labels: ['ai-development', 'auto-order', taskLabel, '継続開発'],\n          assignees: ['nappa0326']\n        }\n      }\n    };\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        0
      ],
      "id": "5e1b19fd-31c6-4ba1-8ab5-9fb6e6223bda",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/repos/nappa0326/ai-development-company/issues",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.request_body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        752,
        0
      ],
      "id": "e631f587-a482-479f-b902-ab98b94b1ed4",
      "name": "HTTP Request - Create an issue",
      "credentials": {
        "githubApi": {
          "id": "pY9qy7slGFPBmR5S",
          "name": "GitHub account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Send a message": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request - Create an issue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Create an issue": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "V00wqOQfw5vs8CVQ"
  },
  "versionId": "4d6fbe38-f458-45fe-abf2-807c7eba60dc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b9ad821e1bac462e0829b0fcfa0ee54572f5b3a4dad3925c8cb3c5dae1bcef22"
  },
  "id": "qO7oMI2Wfkyks2dK",
  "tags": []
}