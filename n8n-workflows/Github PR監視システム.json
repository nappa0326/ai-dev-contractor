{
  "name": "Github PR監視システム",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "github-pr-comments",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "642d1ab5-80d6-4b19-925d-38cd8adb7e0e",
      "name": "Webhook",
      "webhookId": "d362f55e-24bd-4022-acca-cea756d29964"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "        // PRコメントの内容を解析\n        const eventType = $json.body.action; // created, edited, deleted\n        const comment = $json.body.comment?.body || '';\n        const htmlUrl = $json.body.comment?.html_url || '';\n        const commenter = $json.body.comment?.user?.login || '';\n        const commentId = $json.body.comment?.id || null;\n\n        // IssueコメントかPRコメントかを判別\n        const isPullRequestComment = htmlUrl.includes('/pull/') || $json.body.pull_request !== undefined;\n\n        // PRコメントの場合は処理をスキップ\n        if (isPullRequestComment) {\n          return {\n            json: {\n              notification_type: 'none',\n              is_pr_comment: true,\n              skip_reason: 'PR comment, not Issue comment',\n              html_url: htmlUrl\n            }\n          };\n        }\n\n        // Issue情報の取得（PRコメントではないことが確定後）\n        const issueNumber = $json.body.issue?.number || 'N/A';\n        const issueTitle = $json.body.issue?.title || 'タイトル不明';\n        const issueUrl = `https://github.com/${$json.body.repository?.full_name}/issues/${issueNumber}`;\n\n        // ブランチ名の抽出（Claude botのコメントから - 複数形式対応）\n        let branchName = 'N/A';\n        let projectName = 'N/A';\n\n        // パターン1: Markdownリンク形式 [`branch`](https://github.com/.../tree/branch)\n        let branchMatch =\n  comment.match(/\\[`([^`]+)`\\]\\(https:\\/\\/github\\.com\\/[^\\/]+\\/[^\\/]+\\/tree\\/([^)]+)\\)/);\n\n        // パターン2: 太字形式 **ブランチ**: `branch`\n        if (!branchMatch) {\n          branchMatch = comment.match(/\\*\\*ブランチ\\*\\*:\\s*`([^`]+)`/);\n        }\n\n        // パターン3: 通常形式 Branch: branch または ブランチ: branch\n        if (!branchMatch) {\n          branchMatch = comment.match(/(?:Branch|ブランチ):\\s*([^\\s\\n]+)/);\n        }\n\n        if (branchMatch) {\n          branchName = branchMatch[1] || branchMatch[2] || branchMatch[0];\n\n          // プロジェクト名を抽出（複数パターン対応）\n          // パターン1: project/xxx/claude/issue-YY-phaseN\n          let projectMatch = branchName.match(/^project\\/([^\\/]+)(?:\\/|-)?claude\\/issue-\\d+(?:-phase\\d+)?/);\n\n          // パターン2: xxx-phaseN (短縮形)\n          if (!projectMatch) {\n            projectMatch = branchName.match(/^(.+)-phase\\d+$/);\n          }\n\n          if (projectMatch) {\n            projectName = projectMatch[1];\n            // numeric-calculatorのような複合名の場合も考慮\n            if (branchName.includes('numeric-calculator')) {\n              projectName = 'numeric-calculator';\n            }\n          }\n        }\n\n        // @claude-review-neededタグの検出\n        const hasReviewTag = comment.includes('@claude-review-needed');\n\n        // フェーズの検出\n        const phaseMatch = comment.match(/Phase (\\d)/);\n        const phase = phaseMatch ? phaseMatch[1] : null;\n\n        // PR番号とURLの抽出（複数形式対応）\n        // パターン1: PR: #123\n        let prMatch = comment.match(/PR:\\s*#(\\d+)/);\n        // パターン2: Pull Request: [#123](URL)\n        if (!prMatch) {\n          prMatch = comment.match(/Pull Request:\\s*\\[#(\\d+)\\]/);\n        }\n        // パターン3: **Pull Request**: [#123](URL)\n        if (!prMatch) {\n          prMatch = comment.match(/\\*\\*Pull Request\\*\\*:\\s*\\[#(\\d+)\\]/);\n        }\n\n        const prNumber = prMatch ? prMatch[1] : null;\n        const prUrl = prNumber ? `https://github.com/nappa0326/ai-development-company/pull/${prNumber}` :\n  null;\n\n        // プロジェクト完了マーカーの検出（複数条件の組み合わせ）\n\n        // タスクタイプの検出（Issueタイトルと本文から）\n        const issueBody = $json.body.issue?.body || '';\n        const fullText = issueTitle + ' ' + issueBody;\n        const continuationPattern =\n    /\\[(fix|bugfix|enhance|refactor|update|security|docs|test|perf):\\s*#(\\d+)\\]/i;\n        const textMatch = fullText.match(continuationPattern);\n\n        // ラベルからもタスクタイプを判定（フォールバック）\n        const issueLabels = $json.body.issue?.labels || [];\n\n        // タスクタイプの決定（タイトル優先、ラベルをフォールバック）\n        let taskType = textMatch ? textMatch[1].toLowerCase() : null;\n        if (!taskType) {\n          // ラベル名とタスクタイプのマッピングを配列で定義\n          const labelMappings = [\n            { label: '軽微な修正', type: 'fix' },\n            { label: 'バグ修正', type: 'bugfix' },\n            { label: '機能追加', type: 'enhance' },\n            { label: 'リファクタリング', type: 'refactor' },\n            { label: '依存関係更新', type: 'update' },\n            { label: 'セキュリティ', type: 'security' },\n            { label: 'ドキュメント', type: 'docs' },\n            { label: 'テスト', type: 'test' },\n            { label: 'パフォーマンス', type: 'perf' }\n          ];\n\n          // ラベルからタスクタイプを検索\n          for (const label of issueLabels) {\n            const mapping = labelMappings.find(m => m.label === label.name);\n            if (mapping) {\n              taskType = mapping.type;\n              break;\n            }\n          }\n        }\n\n        // 新規/継続の判定\n        const isNewProject = issueLabels.some(label => label.name === '新規開発');\n        const isContinuation = issueLabels.some(label => label.name === '継続開発') || taskType !== null;\n\n        // 期待されるフェーズの決定（配列方式で型エラー回避）\n        let expectedPhase = 4; // デフォルト値\n\n        // タスクタイプとフェーズのマッピングを配列で定義\n        const phaseMappings = [\n          { type: 'fix', phase: 1 },\n          { type: 'bugfix', phase: 2 },\n          { type: 'enhance', phase: 3 },\n          { type: 'refactor', phase: 4 },\n          { type: 'update', phase: 2 },\n          { type: 'security', phase: 2 },\n          { type: 'docs', phase: 2 },\n          { type: 'test', phase: 2 },\n          { type: 'perf', phase: 3 }\n        ];\n\n        // タスクタイプに対応するフェーズを検索\n        if (taskType) {\n          const phaseMapping = phaseMappings.find(m => m.type === taskType);\n          if (phaseMapping) {\n            expectedPhase = phaseMapping.phase;\n          }\n        }\n\n        // フェーズ完了の検出\n        let hasExpectedPhase = comment.includes(`Phase ${expectedPhase}`);\n\n        // refactorの特別処理（3または4で完了）\n        if (taskType === 'refactor' && expectedPhase === 4) {\n          hasExpectedPhase = comment.includes('Phase 3') || comment.includes('Phase 4');\n        }\n\n        // 1. Phase 4の検出（新規プロジェクト用に維持）\n        const hasPhase4 = comment.includes('Phase 4');\n\n        // 2. PROJECT COMPLETEDが独立した形で存在（前後が記号か空白）\n        const hasCleanProjectCompleted =\n          /(?:^|[\\s\\*\\-\\:])PROJECT COMPLET(?:E|ED)(?:[\\s\\*\\-\\:]|$)/i.test(comment);\n\n        // 3. 実際のPRリンクの存在（[#数字](URL)形式）\n        const hasRealPRLink = /\\[#\\d+\\]\\(https:\\/\\/github\\.com\\/.*\\/pull\\/\\d+\\)/.test(comment);\n\n        // 4. PR作成を示すパターン（補助的）\n        const prPatterns = [\n          /Pull Request Created:/i,\n          /PR Created:/i,\n          /Create PR/\n        ];\n        const hasPRCreation = prPatterns.some(pattern => comment.match(pattern));\n\n        // 最終判定：期待されるフェーズ + PROJECT COMPLETED + PR\n        const hasProjectCompleteMarker =\n          hasExpectedPhase &&\n          hasCleanProjectCompleted &&\n          (hasRealPRLink || hasPRCreation);\n\n        // Claude Code作業完了の検出\n        const isClaudeFinished =\n          comment.startsWith('**Claude finished') &&\n          comment.includes('task**') &&\n          commenter === 'claude[bot]';\n\n        // 開発完了判定\n        const isProjectComplete = hasProjectCompleteMarker && commenter === 'claude[bot]';\n\n        // レビューが必要かどうかを判定\n        const needsReview = hasReviewTag &&\n          !isProjectComplete &&  // 完了時はレビュー不要\n          (eventType === 'created' ||\n          (eventType === 'edited' && comment.includes('Claude finished')));\n\n        // 通知タイプの決定\n        let notificationType = 'none';\n\n        // Claude finishedヘッダーがある場合は、完了通知をスキップ（重複防止）\n        if (hasProjectCompleteMarker && commenter === 'claude[bot]' && !isClaudeFinished) {\n            notificationType = 'completion';\n        } else if (needsReview) {  // レビューを先に判定\n            notificationType = 'review';\n        } else if (isClaudeFinished) {  // 最後に判定\n            notificationType = 'claude_finished';\n        }\n\n        return {\n          json: {\n            notification_type: notificationType,\n            needs_review: needsReview,\n            is_completed: isProjectComplete,\n            issue_number: issueNumber,\n            issue_title: issueTitle,\n            issue_url: issueUrl,\n            branch_name: branchName,\n            project_name: projectName,\n            phase: phase,\n            pr_number: prNumber,      // 追加\n            pr_url: prUrl,            // 追加\n            has_pr: prNumber !== null, // 追加\n            comment: comment,\n            html_url: htmlUrl,\n            event_type: eventType,\n            commenter: commenter,\n            comment_id: commentId,\n            has_phase4_marker: hasProjectCompleteMarker,\n            is_claude_finished: isClaudeFinished,\n            has_pr_creation: hasPRCreation,  // デバッグ用\n            is_pr_comment: false,  // Issueコメントであることを明示\n            // デバッグ用の追加情報\n            task_type: taskType,\n            expected_phase: expectedPhase,\n            is_new_project: isNewProject,\n            is_continuation: isContinuation,\n          }\n        };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "98f6b085-3151-47af-9b44-4d8caddfd425",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a884fec7-5b9a-47e9-bc70-03a66eb6f577",
              "leftValue": "={{ $json.notification_type }}",
              "rightValue": "none",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        440,
        0
      ],
      "id": "7e8e3f38-0146-446f-bb93-8e545120ab72",
      "name": "Filter"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.notification_type }}",
                    "rightValue": "review",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "95b31a38-65a1-4407-8f5d-289198fc7d6d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "review"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "34d54dc6-61af-4930-a5b4-6ef1eaeabdc0",
                    "leftValue": "={{ $json.notification_type }}",
                    "rightValue": "completion",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "completion"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        660,
        0
      ],
      "id": "43fec369-d758-4f2e-926e-0c23cf51676b",
      "name": "Switch"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C094LNGF8H5",
          "mode": "id"
        },
        "messageType": "block",
        "blocksUi": "=  {\n    \"blocks\": [\n      {\n        \"type\": \"header\",\n        \"text\": {\n          \"type\": \"plain_text\",\n          \"text\": \"📋 {{ $json.project_name }} - Phase {{ $json.phase }}完了\"\n        }\n      },\n      {\n        \"type\": \"section\",\n        \"text\": {\n          \"type\": \"mrkdwn\",\n          \"text\": \"Issue: <{{ $json.issue_url }}|#{{ $json.issue_number }}>\\n{{ $json.has_pr ? 'PR: <' + $json.pr_url + '|#' + $json.pr_number + '> 🆕' : 'PR: 作成待機中' }}\\nBranch: `{{ $json.branch_name }}`\\n進捗: {{ $json.phase == '1' ? '✅⬜⬜⬜ 設計完了 (25%)' : $json.phase == '2' ? '✅✅⬜⬜ MVP完了 (50%)' : $json.phase == '3' ? '✅✅✅⬜ 実装完了 (80%)' : '✅✅✅✅ 品質向上完了 (100%)' }}\"\n        }\n      },\n      {\n        \"type\": \"divider\"\n      },\n      {\n        \"type\": \"context\",\n        \"elements\": [\n          {\n            \"type\": \"mrkdwn\",\n            \"text\": \"👉 {{ $json.has_pr ? 'PRでレビューをお願いします' : 'PR作成をお待ちください' }}\"\n          }\n        ]\n      }\n    ]\n  }",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        940,
        -80
      ],
      "id": "cf156cf2-fd7a-4edf-9b8f-8f7043da1cd6",
      "name": "Send a message - Review",
      "webhookId": "f7648295-fcd6-41fa-bb20-d942c1161b4d",
      "credentials": {
        "slackApi": {
          "id": "aHC6dGXUUgCWfDpJ",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C094LNGF8H5",
          "mode": "id"
        },
        "messageType": "block",
        "blocksUi": "=  {\n    \"blocks\": [\n      {\n        \"type\": \"header\",\n        \"text\": {\n          \"type\": \"plain_text\",\n          \"text\": \"🎉 {{ $json.project_name }} - PROJECT COMPLETED\"\n        }\n      },\n      {\n        \"type\": \"section\",\n        \"text\": {\n          \"type\": \"mrkdwn\",\n          \"text\": \"すべての開発が完了しました！\\n\\nIssue: <{{ $json.issue_url }}|#{{ $json.issue_number }}>\\n{{ $json.has_pr ? 'PR: <' + $json.pr_url + '|#' + $json.pr_number + '> ✅' : '' }}\\n\\n{{ $json.is_new_project ? '全4フェーズが完了し、プロダクションレディな状態です。' : $json.task_type +\n  'タスクが完了しました。' }}\"\n        }\n      },\n      {\n        \"type\": \"divider\"\n      },\n      {\n        \"type\": \"context\",\n        \"elements\": [\n          {\n            \"type\": \"mrkdwn\",\n            \"text\": \"✅ {{ $json.expected_phase == 1 ? '1フェーズ' : $json.expected_phase == 2 ? '2フェーズ' : $json.expected_phase == 3 ? '3フェーズ' : '4フェーズ' }}のタスクが完了\"\n          }\n        ]\n      }\n    ]\n  }",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        940,
        100
      ],
      "id": "697ebc3d-6c53-44d3-b3d1-bf897b9f4f4e",
      "name": "Send a message - Completion",
      "webhookId": "f7648295-fcd6-41fa-bb20-d942c1161b4d",
      "credentials": {
        "slackApi": {
          "id": "aHC6dGXUUgCWfDpJ",
          "name": "Slack account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Send a message - Review",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message - Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "V00wqOQfw5vs8CVQ"
  },
  "versionId": "6fb93d07-b678-44f4-9459-948e2a44d728",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b9ad821e1bac462e0829b0fcfa0ee54572f5b3a4dad3925c8cb3c5dae1bcef22"
  },
  "id": "9u9VFiVmuUAciUtW",
  "tags": []
}