{
  "name": "ブランチ管理システム",
  "nodes": [
    {
      "parameters": {
        "path": "branch-check",
        "options": {
          "responseData": "allEntries"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1180,
        220
      ],
      "id": "02abd739-0c29-441b-b92b-e088ee8f8272",
      "name": "Webhook Trigger",
      "webhookId": "branch-management-webhook"
    },
    {
      "parameters": {
        "jsCode": "// WebhookからのデータとGitHub PR URLの処理\nconst input = $json;\n\n// PR URLからowner, repo, pull番号を抽出\nlet owner, repo, pullNumber, commentId;\n\nif (input.pr_url) {\n  const urlMatch = input.pr_url.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)\\/pull\\/(\\d+)/);\n  if (urlMatch) {\n    owner = urlMatch[1];\n    repo = urlMatch[2];\n    pullNumber = urlMatch[3];\n  }\n}\n\n// コメントIDの処理\ncommentId = input.comment_id;\n\n// Issue番号の処理（PRとIssueで番号が異なる場合）\nconst issueNumber = input.issue_number || pullNumber;\n\nreturn {\n  owner: owner || 'ai-development-company',\n  repo: repo || 'projects',\n  pullNumber,\n  commentId,\n  issueNumber,\n  originalData: input\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        220
      ],
      "id": "f31b32f2-b26a-4399-928e-36f3c93be446",
      "name": "Process Webhook Data"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/issues/comments/{{ $json.commentId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -760,
        220
      ],
      "id": "6f2cbfd3-297b-4ace-80f4-06291108dfb9",
      "name": "Get PR Comment",
      "credentials": {
        "githubApi": {
          "id": "pY9qy7slGFPBmR5S",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract issue number from comment\nconst comment = $json.body || '';\nconst issueMatch = comment.match(/issue-(\\d+)/i);\nconst issueNumber = issueMatch ? issueMatch[1] : $('Process Webhook Data').item.json.issueNumber;\n\n// Extract phase information\nconst phaseMatch = comment.match(/Phase\\s+(\\d)/i);\nconst phaseNumber = phaseMatch ? parseInt(phaseMatch[1]) : null;\n\n// Check if this is a claude-review-needed comment\nconst isReviewNeeded = comment.includes('@claude-review-needed');\n\n// Extract branch name if mentioned\nconst branchMatch = comment.match(/branch:\\s*([\\w\\/-]+)/i);\nconst mentionedBranch = branchMatch ? branchMatch[1] : null;\n\n// Pass through owner and repo\nconst owner = $('Process Webhook Data').item.json.owner;\nconst repo = $('Process Webhook Data').item.json.repo;\n\nreturn {\n  owner,\n  repo,\n  issueNumber,\n  phaseNumber,\n  isReviewNeeded,\n  mentionedBranch,\n  originalComment: comment\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -540,
        220
      ],
      "id": "92ea1302-55a8-4077-8877-4d35538e3af4",
      "name": "Parse Comment"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-check",
              "leftValue": "={{ $json.isReviewNeeded }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -320,
        420
      ],
      "id": "5f51472f-262f-4a53-90b7-d452ed1598b3",
      "name": "Is Review Needed?"
    },
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/branches",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -100,
        120
      ],
      "id": "ddb35aa4-6c89-4cec-805a-3f717c689bf9",
      "name": "List All Branches",
      "credentials": {
        "githubApi": {
          "id": "pY9qy7slGFPBmR5S",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "joinMode": "enrichInput2",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        100,
        -80
      ],
      "id": "7bc4aedd-43fc-4aa7-9c8d-24a873cace02",
      "name": "Merge Data"
    },
    {
      "parameters": {
        "jsCode": "// Get merged data\nconst issueNumber = $json.issueNumber;\nconst phaseNumber = $json.phaseNumber;\nconst mentionedBranch = $json.mentionedBranch;\nconst owner = $json.owner;\nconst repo = $json.repo;\n\n// Get branches array - handle both array and single item\nlet branches = [];\nif ($input.all()[0].json) {\n  // If branches is directly in json\n  if (Array.isArray($input.all()[0].json)) {\n    branches = $input.all()[0].json;\n  } else if ($input.all()[0].json.branches) {\n    branches = $input.all()[0].json.branches;\n  }\n}\n\n// Find branches for this issue\nconst issueBranches = branches.filter(branch => \n  branch.name && branch.name.includes(`issue-${issueNumber}`)\n);\n\n// Check phase continuity\nlet warnings = [];\nlet errors = [];\n\nif (issueBranches.length === 0 && phaseNumber > 1) {\n  errors.push(`⚠️ Phase ${phaseNumber}が開始されましたが、issue-${issueNumber}用のブランチが見つかりません！`);\n} else if (issueBranches.length > 1) {\n  warnings.push(`📌 issue-${issueNumber}に複数のブランチが存在します: ${issueBranches.map(b => b.name).join(', ')}`);\n}\n\nif (mentionedBranch && issueBranches.length > 0) {\n  const correctBranch = issueBranches[0].name;\n  if (mentionedBranch !== correctBranch) {\n    warnings.push(`🔄 報告されたブランチ(${mentionedBranch})と実際のブランチ(${correctBranch})が異なります`);\n  }\n}\n\nreturn {\n  owner,\n  repo,\n  issueNumber,\n  phaseNumber,\n  existingBranches: issueBranches.map(b => b.name),\n  branchCount: issueBranches.length,\n  warnings,\n  errors,\n  shouldAlert: errors.length > 0 || warnings.length > 0\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        -80
      ],
      "id": "f25cd353-fa70-41ce-9b8c-8d2ccec041b1",
      "name": "Check Branch Continuity"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-alert-check",
              "leftValue": "={{ $json.shouldAlert }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        540,
        -80
      ],
      "id": "591f213c-ac91-4059-a530-0c8985af239d",
      "name": "Should Alert?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://slack.com/api/chat.postMessage",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"channel\": \"C094LNGF8H5\",\n  \"text\": \"🚨 ブランチ管理アラート\",\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": `*Issue #${$json.issueNumber} - Phase ${$json.phaseNumber}*\\n\\n${$json.errors.concat($json.warnings).join('\\n')}`\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": `*既存ブランチ:* ${$json.existingBranches.length > 0 ? $json.existingBranches.join(', ') : 'なし'}`\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        -100
      ],
      "id": "9037a638-8dd8-4edb-b5b1-3bc1708e6bbf",
      "name": "Send Slack Alert",
      "credentials": {
        "slackApi": {
          "id": "aHC6dGXUUgCWfDpJ",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/issues/{{ $json.issueNumber }}/comments",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"body\": `## ⚠️ ブランチ管理チェック\\n\\n${$json.errors.concat($json.warnings).join('\\n')}\\n\\n### 対応方法\\n\\n${$json.errors.length > 0 ? '1. 既存のブランチを確認し、そのブランチで作業を継続してください\\n2. `git checkout ' + ($json.existingBranches[0] || 'claude/issue-' + $json.issueNumber + '-YYYYMMDD_HHMMSS') + '`\\n3. 前のフェーズの実装を必ず確認してください' : $json.warnings.join('\\n')}`\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        -240
      ],
      "id": "8a7cc718-0b45-4d6c-923e-f58dceb636d8",
      "name": "Add GitHub Comment",
      "credentials": {
        "githubApi": {
          "id": "pY9qy7slGFPBmR5S",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1240,
        440
      ],
      "id": "e4b77abb-3539-4bfe-88cf-419e90be54bf",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Webhook Data": {
      "main": [
        [
          {
            "node": "Get PR Comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get PR Comment": {
      "main": [
        [
          {
            "node": "Parse Comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Comment": {
      "main": [
        [
          {
            "node": "Is Review Needed?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Review Needed?": {
      "main": [
        [
          {
            "node": "List All Branches",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List All Branches": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Check Branch Continuity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Branch Continuity": {
      "main": [
        [
          {
            "node": "Should Alert?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Alert?": {
      "main": [
        [
          {
            "node": "Send Slack Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Add GitHub Comment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Alert": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add GitHub Comment": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8bbbc238-8290-48c4-8b75-076cacd1d91d",
  "meta": {
    "instanceId": "b9ad821e1bac462e0829b0fcfa0ee54572f5b3a4dad3925c8cb3c5dae1bcef22"
  },
  "id": "lmjAChibrbVfpUWR",
  "tags": []
}